{"version":3,"sources":["utils/fetchApi.ts","types/ErrorNotification.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/ReplyComment/ReplyComment.tsx","components/Comment/Comment.tsx","components/Pagination/Pagination.tsx","utils/getNumber.ts","components/CommentsList/CommentsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","method","data","options","body","URLSearchParams","toString","headers","fetch","then","response","ok","Error","json","res","results","ErrorNotification","client","NewCommentForm","onLoad","onComment","replyTo","useState","commentText","setCommentText","username","setUsername","email","setEmail","homepage","setHomepage","verified","setVerified","captchaToken","setCaptchaToken","properTextWithTags","setProperTextWithTags","imageFile","setImageFile","textFile","setTextFile","captchaRef","useRef","verify","current","getResponse","useEffect","handleSubmit","event","a","preventDefault","test","message","trim","messageText","responseTo","Add","className","title","id","onSubmit","aria-label","onClick","type","htmlFor","name","required","placeholder","value","onChange","target","accept","files","sitekey","process","onVerify","disabled","ReplyComment","reply","onReply","createdAt","replyDateCreated","slice","replyTimeCreated","handleReplyClick","href","onKeyDown","aria-hidden","Comment","comments","comment","dateCreated","timeCreated","replies","filter","item","Number","map","Pagination","numberOfComments","currentPage","perPage","onPageChange","amountOfPages","Math","ceil","pages","from","to","numbers","n","push","getNumbers","isFirstPage","useMemo","isLastPage","handleClick","page","window","scrollTo","top","handleKeyDown","role","tabIndex","classNames","pageNumber","aria-current","CommentsList","setNumberOfComments","setCurrentPage","setComments","allComments","setAllComments","isCommenting","setIsCommenting","setReplyTo","getCommentsFromServer","useCallback","allCommentsFromServer","commentsFromServer","length","NoComments","mainComments","Object","prototype","hasOwnProperty","call","newPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9aee4628.chunk.js","sourcesContent":["// eslint-disable-next-line max-len\nconst BASE_URL = 'https://comments-spa.netlify.app/.netlify/functions/server';\n// const TEST_URL = 'http://localhost:9000/.netlify/functions/server';\n\n// export function getComments<T>(url: string): Promise<T> {\n//   return fetch(TEST_URL + url)\n//     .then(response => {\n//       if (!response.ok) {\n//         throw new Error();\n//       }\n\n//       return response.json();\n//     });\n// }\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = new URLSearchParams(data).toString();\n    options.headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      const dataReceived = response.json();\n\n      const comments = dataReceived.then((res) => res.results);\n\n      return comments;\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  // delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorNotification {\n  Username = 'Username can\\'t be empty',\n  Email = 'Email can\\'t be empty',\n  CommentText = 'You need to add your comment',\n  Add = 'Unable to add a comment',\n  // Update = 'Unable to update a todo',\n  // Remove = 'Unable to remove a todo',\n  None = '',\n  NoComments = 'Comments load failed',\n}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable no-console */\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  ChangeEvent,\n} from 'react';\nimport Reaptcha from 'reaptcha';\nimport { addComment } from '../../api/comments';\nimport { ErrorNotification } from '../../types/ErrorNotification';\n\nfunction hasProperText(str: string) {\n  const patternForTagsAndText = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  return patternForTagsAndText.test(str);\n}\n\ntype Props = {\n  onLoad: () => Promise<void>;\n  onComment: (isCommenting: boolean) => void;\n  replyTo: string;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onLoad,\n  onComment,\n  replyTo,\n}) => {\n  const [commentText, setCommentText] = useState<string>('');\n  const [username, setUsername] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [homepage, setHomepage] = useState<string>('');\n  const [verified, setVerified] = useState<boolean>(false);\n  const [captchaToken, setCaptchaToken] = useState('');\n  const [properTextWithTags, setProperTextWithTags] = useState<boolean>(false);\n  const [imageFile, setImageFile] = useState<File>();\n  const [textFile, setTextFile] = useState<File>();\n  // const [fileInput] = useState(React.createRef());\n\n  const captchaRef = useRef<Reaptcha>(null);\n\n  const siteKey: string = process.env.REACT_APP_SITE_KEY || '';\n\n  const resetForm = () => {\n    setUsername('');\n    setEmail('');\n    setHomepage('');\n    setCommentText('');\n  };\n\n  const verify = () => {\n    captchaRef.current?.getResponse().then(res => {\n      setCaptchaToken(res);\n    });\n\n    if (!captchaToken) {\n      setVerified(false);\n    }\n\n    setVerified(true);\n  };\n\n  useEffect(() => {\n    return () => verify();\n  });\n\n  const handleImageFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setImageFile(event.target.files[0]);\n    }\n  };\n\n  const handleTextFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setTextFile(event.target.files[0]);\n    }\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (hasProperText(commentText)) {\n      setProperTextWithTags(true);\n    }\n\n    try {\n      await addComment({\n        username: username.trim(),\n        email: email.trim(),\n        homepage: homepage.trim(),\n        messageText: commentText.trim(),\n        responseTo: replyTo,\n      });\n\n      await onLoad();\n    } catch {\n      throw new Error(ErrorNotification.Add);\n    } finally {\n      resetForm();\n      onComment(false);\n    }\n\n    setVerified(false);\n    // setFileInput([]);\n  };\n\n  return (\n    <div className=\"comment comment__container\" title=\"commentForm\">\n      <a id=\"comment-form\">\n        <form onSubmit={handleSubmit} className=\"box comment__form\">\n          <div className=\"form__title\">\n            <h2 className=\"subtitle is-3\">Add a new comment</h2>\n\n            <button\n              aria-label=\"Save\"\n              onClick={() => onComment(false)}\n              type=\"button\"\n              className=\"delete is-danger button__close\"\n            >\n            </button>\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"username\" className=\"label\">\n              Username:\n              <div className=\"control has-icons-left has-icons-right\">\n                <input\n                  name=\"username\"\n                  required\n                  type=\"text\"\n                  className=\"input input-username\"\n                  placeholder=\"User name goes here\"\n                  value={username}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n                    setUsername(event.target.value))}\n                />\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-user\"></i>\n                </span>\n              </div>\n            </label>\n          </div>\n\n          <div className=\"field\">\n            <label htmlFor=\"email\" className=\"label\">\n              Email:\n              <div className=\"control has-icons-left has-icons-right\">\n                <input\n                  name=\"email\"\n                  required\n                  type=\"email\"\n                  className=\"input input-email\"\n                  placeholder=\"example@example.com\"\n                  value={email}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n                    setEmail(event.target.value))}\n                />\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-envelope\"></i>\n                </span>\n              </div>\n            </label>\n          </div>\n\n          <div className=\"field\">\n            <label htmlFor=\"homepage\" className=\"label\">\n              Homepage:\n              <div className=\"control has-icons-left has-icons-right\">\n                <input\n                  name=\"homepage\"\n                  type=\"url\"\n                  className=\"input input-homepage\"\n                  placeholder=\"https://example.com\"\n                  value={homepage}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => (\n                    setHomepage(event.target.value))}\n                />\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-solid fa-globe\"></i>\n                </span>\n              </div>\n            </label>\n          </div>\n\n          <div className=\"field\">\n            <label htmlFor=\"comment\" className=\"label\">\n              New comment:\n              <div className=\"control\">\n                <textarea\n                  name=\"comment\"\n                  className=\"input input-comment\"\n                  placeholder=\"Your comment goes here\"\n                  value={commentText}\n                  onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => (\n                    setCommentText(event.target.value))}\n                >\n                </textarea>\n              </div>\n            </label>\n            {properTextWithTags && (\n              <p className=\"help is-danger\">This text is not valid. Check it for valid HTML code!</p>\n            )}\n          </div>\n\n          <div className=\"file is-info has-name\">\n            <label htmlFor=\"file-image\" className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"file\"\n                accept=\".png, .gif, .jpg, .jpeg\"\n                onChange={handleImageFileChange}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-cloud-upload-alt\"></i>\n                </span>\n                <span className=\"file-label\">\n                  Attach image here\n                </span>\n              </span>\n              <span className=\"file-name\">\n                {imageFile}\n              </span>\n            </label>\n          </div>\n\n          <div className=\"file is-warning has-name\">\n            <label htmlFor=\"file-text\" className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"file\"\n                accept=\".txt\"\n                onChange={handleTextFileChange}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-cloud-upload-alt\"></i>\n                </span>\n                <span className=\"file-label\">\n                  Attach text here\n                </span>\n              </span>\n              <span className=\"file-name\">\n                {textFile}\n              </span>\n            </label>\n          </div>\n\n          <div className=\"button__container\">\n            <Reaptcha sitekey={siteKey} onVerify={verify} />\n\n            <button\n              type=\"submit\"\n              className=\"button is-success is-outlined button__send\"\n              disabled={!username || !email || !commentText || !verified}\n            >\n              Send\n            </button>\n          </div>\n        </form>\n      </a>\n    </div>\n  );\n};\n","import { CommentType } from '../types/CommentType';\nimport { client } from '../utils/fetchApi';\n\nexport const getComments = (page: number, perPage: number) => {\n  return client.get<CommentType[]>(`/messages?page=${page}&limit=${perPage}`);\n};\n\nexport const getAllComments = () => {\n  return client.get<CommentType[]>('/messages');\n};\n\nexport const addComment = (message: Omit<CommentType, 'id' | 'createdAt'>) => {\n  return client.post<CommentType>('/messages', message);\n};\n","import React from 'react';\nimport { CommentType } from '../../types/CommentType';\n\ntype Props = {\n  reply: CommentType;\n  onReply: (replyTo: string) => void;\n  onComment: (isCommenting: boolean) => void;\n};\n\nexport const ReplyComment: React.FC<Props> = ({\n  reply,\n  onReply,\n  onComment,\n}) => {\n  const {\n    username,\n    email,\n    messageText,\n    createdAt,\n  } = reply;\n\n  const replyDateCreated = createdAt.slice(0, 10);\n  const replyTimeCreated = createdAt.slice(11, 19);\n\n  const handleReplyClick = () => {\n    onComment(true);\n    onReply(reply.id.toString());\n  };\n\n  return (\n    <div className=\"box has-background-warning reply-comment__container\" title=\"comment\">\n      <div className=\"media-content\">\n        <div className=\"content\">\n          <p>\n            <strong>{username}</strong>\n            &nbsp;\n            <small>{email}</small>\n            &nbsp;\n            <small>\n              {replyDateCreated}\n              &nbsp;\n              {replyTimeCreated}\n            </small>\n            <br></br>\n            {messageText}\n          </p>\n        </div>\n        <nav className=\"level is-mobile\">\n          <div className=\"level-left\">\n            <a\n              href=\"#comment-form\"\n              className=\"level-item\"\n              aria-label=\"reply\"\n              onClick={handleReplyClick}\n              onKeyDown={handleReplyClick}\n            >\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-reply\" aria-hidden=\"true\"></i>\n              </span>\n            </a>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { CommentType } from '../../types/CommentType';\nimport { ReplyComment } from '../ReplyComment';\n\ntype Props = {\n  comments: CommentType[];\n  comment: CommentType;\n  onReply: (replyTo: string) => void;\n  onComment: (isCommenting: boolean) => void;\n};\n\nexport const Comment: React.FC<Props> = ({\n  comments,\n  comment,\n  onReply,\n  onComment,\n}) => {\n  const {\n    username,\n    email,\n    messageText,\n    createdAt,\n  } = comment;\n\n  const dateCreated = createdAt.slice(0, 10);\n  const timeCreated = createdAt.slice(11, 19);\n  const replies = comments\n    .filter((item: CommentType) => comment.id === Number(item.responseTo))\n    || null;\n\n  const handleReplyClick = () => {\n    onComment(true);\n    onReply(comment.id.toString());\n  };\n\n  return (\n    <>\n      <div className=\"box\" title=\"comment\">\n        <div className=\"media-content\">\n          <div className=\"content\">\n            <p>\n              <strong>{username}</strong>\n              &nbsp;\n              <small>{email}</small>\n              &nbsp;\n              <small>\n                {dateCreated}\n                &nbsp;\n                {timeCreated}\n              </small>\n              <br></br>\n              {messageText}\n            </p>\n          </div>\n          <nav className=\"level is-mobile\">\n            <div className=\"level-left\">\n              <a\n                href=\"#comment-form\"\n                className=\"level-item\"\n                aria-label=\"reply\"\n                onClick={handleReplyClick}\n                onKeyDown={handleReplyClick}\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-reply\" aria-hidden=\"true\"></i>\n                </span>\n              </a>\n            </div>\n          </nav>\n        </div>\n      </div>\n\n      {replies.map(reply => (\n        <ReplyComment\n          key={reply.id}\n          reply={reply}\n          onReply={handleReplyClick}\n          onComment={onComment}\n        />\n      ))}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils/getNumber';\n\ntype Props = {\n  numberOfComments: number;\n  currentPage: number;\n  perPage: number;\n  onPageChange: (currentPage: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  numberOfComments,\n  currentPage,\n  perPage,\n  onPageChange,\n}) => {\n  const amountOfPages = Math.ceil(numberOfComments / perPage);\n  const pages = getNumbers(1, amountOfPages);\n  const isFirstPage = useMemo(() => currentPage === 1, [currentPage]);\n  const isLastPage = useMemo(\n    () => currentPage === amountOfPages,\n    [currentPage, amountOfPages],\n  );\n\n  const handleClick = (event: React.MouseEvent, page: number) => {\n    event.preventDefault();\n    onPageChange(page);\n    window.scrollTo({ top: 0 });\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent, page: number) => {\n    event.preventDefault();\n    onPageChange(page);\n    window.scrollTo({ top: 0 });\n  };\n\n  return (\n    <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\n      <a\n        role=\"button\"\n        tabIndex={0}\n        className={classNames('pagination-previous', {\n          'is-disabled': isFirstPage,\n        })}\n        title=\"This is the first page\"\n        onClick={(event) => handleClick(event, currentPage - 1)}\n        onKeyDown={(event) => handleKeyDown(event, currentPage - 1)}\n      >\n        Previous\n      </a>\n      <a\n        role=\"button\"\n        tabIndex={0}\n        className={classNames('pagination-next', {\n          'is-disabled': isLastPage,\n        })}\n        onClick={(event) => handleClick(event, currentPage + 1)}\n        onKeyDown={(event) => handleKeyDown(event, currentPage + 1)}\n      >\n        Next page\n      </a>\n      <ul className=\"pagination-list\">\n        <li>\n          {pages.map((pageNumber) => (\n            <a\n              key={pageNumber}\n              href=\"/\"\n              className={classNames('pagination-link', {\n                'is-current': currentPage === pageNumber,\n              })}\n              aria-label={`Goto page ${pageNumber}`}\n              aria-current=\"page\"\n              onClick={(event) => handleClick(event, pageNumber)}\n              onKeyDown={(event) => handleKeyDown(event, pageNumber)}\n            >\n              {pageNumber}\n            </a>\n          ))}\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { getAllComments, getComments } from '../../api/comments';\nimport { CommentType } from '../../types/CommentType';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../Comment/Comment';\nimport { ErrorNotification } from '../../types/ErrorNotification';\nimport { Pagination } from '../Pagination';\n\nconst perPage = 25;\n\nexport const CommentsList: React.FC = () => {\n  const [numberOfComments, setNumberOfComments] = useState<number>(0);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [comments, setComments] = useState<CommentType[]>([]);\n  const [allComments, setAllComments] = useState<CommentType[]>([]);\n  // const [error, setError] = useState<ErrorNotification>(ErrorNotification.None);\n  const [isCommenting, setIsCommenting] = useState<boolean>(false);\n  const [replyTo, setReplyTo] = useState<string>('');\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const getCommentsFromServer = useCallback(async () => {\n    try {\n      const allCommentsFromServer = await getAllComments();\n      const commentsFromServer = await getComments(currentPage, perPage);\n\n      setComments(commentsFromServer);\n      setNumberOfComments(allCommentsFromServer.length);\n      setAllComments(allCommentsFromServer);\n    } catch {\n      throw new Error(ErrorNotification.NoComments);\n    }\n  }, [currentPage]);\n\n  useEffect(() => {\n    getCommentsFromServer();\n  }, [currentPage]);\n\n  const mainComments = comments.filter((item) => (\n    !Object.prototype.hasOwnProperty.call(item, 'responseTo')\n    || item.responseTo === 'NULL'));\n\n  return (\n    <div className=\"comments-list__container\">\n      <h1>Comments List</h1>\n      <table className=\"table is-fullwidth\">\n        <thead>\n          <tr>\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                <a href=\"#/\">\n                  <span className=\"icon\">\n                    <i className=\"fas fa-sort fa-sort-down\" />\n                  </span>\n                </a>\n              </span>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {mainComments.map((comment) => (\n            <tr key={comment.id}>\n              <td>\n                <Comment\n                  comment={comment}\n                  comments={allComments}\n                  onReply={setReplyTo}\n                  onComment={setIsCommenting}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <a href=\"#comment-form\">\n        <button\n          type=\"button\"\n          className={classNames('button is-primary is-outlined', {\n            'is-hidden': isCommenting,\n          })}\n          onClick={() => setIsCommenting(true)}\n        >\n          Add a new comment\n        </button>\n      </a>\n      <Pagination\n        numberOfComments={numberOfComments}\n        currentPage={currentPage}\n        perPage={perPage}\n        onPageChange={handlePageChange}\n      />\n      {isCommenting && (\n        <NewCommentForm\n          onLoad={getCommentsFromServer}\n          onComment={setIsCommenting}\n          replyTo={replyTo}\n        />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport { CommentsList } from './components/CommentsList';\n\nexport const App: React.FC = () => {\n  // const wsURL: string = process.env.WS_API_URL || '';\n\n  // useEffect(() => {\n  //   const socket = new WebSocket(wsURL);\n\n  //   socket.addEventListener('message', (event) => {\n  //     const message = JSON.parse(event.data);\n\n  //     setComments(current => [message, ...current]);\n  //   });\n  // });\n  // const handleSubmit = useCallback(\n  //   async (event: React.FormEvent<HTMLFormElement>) => {\n  //     event.preventDefault();\n\n  //     if ()\n  //   }\n  // )\n\n  return (\n    <main className=\"main\">\n      <div className=\"main__container\">\n        <CommentsList />\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}